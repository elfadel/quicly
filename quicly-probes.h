/* Generated by the Systemtap dtrace wrapper */


#define _SDT_HAS_SEMAPHORES 1


#define STAP_HAS_SEMAPHORES 1 /* deprecated */


#include <sys/sdt.h>

/* QUICLY_CONNECT ( struct st_quicly_conn_t *conn, int64_t at, uint32_t version ) */
#if defined STAP_SDT_V1
#define QUICLY_CONNECT_ENABLED() __builtin_expect (connect_semaphore, 0)
#define quicly_connect_semaphore connect_semaphore
#else
#define QUICLY_CONNECT_ENABLED() __builtin_expect (quicly_connect_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_connect_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CONNECT(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, connect, arg1, arg2, arg3)

/* QUICLY_ACCEPT ( struct st_quicly_conn_t *conn, int64_t at, const char *dcid, struct st_quicly_address_token_plaintext_t *address_token ) */
#if defined STAP_SDT_V1
#define QUICLY_ACCEPT_ENABLED() __builtin_expect (accept_semaphore, 0)
#define quicly_accept_semaphore accept_semaphore
#else
#define QUICLY_ACCEPT_ENABLED() __builtin_expect (quicly_accept_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_accept_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_ACCEPT(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, accept, arg1, arg2, arg3, arg4)

/* QUICLY_FREE ( struct st_quicly_conn_t *conn, int64_t at ) */
#if defined STAP_SDT_V1
#define QUICLY_FREE_ENABLED() __builtin_expect (free_semaphore, 0)
#define quicly_free_semaphore free_semaphore
#else
#define QUICLY_FREE_ENABLED() __builtin_expect (quicly_free_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_free_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_FREE(arg1, arg2) \
DTRACE_PROBE2 (quicly, free, arg1, arg2)

/* QUICLY_SEND ( struct st_quicly_conn_t *conn, int64_t at, int state, const char *dcid ) */
#if defined STAP_SDT_V1
#define QUICLY_SEND_ENABLED() __builtin_expect (send_semaphore, 0)
#define quicly_send_semaphore send_semaphore
#else
#define QUICLY_SEND_ENABLED() __builtin_expect (quicly_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_SEND(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, send, arg1, arg2, arg3, arg4)

/* QUICLY_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, const char *dcid, const void *bytes, size_t bytes_len ) */
#if defined STAP_SDT_V1
#define QUICLY_RECEIVE_ENABLED() __builtin_expect (receive_semaphore, 0)
#define quicly_receive_semaphore receive_semaphore
#else
#define QUICLY_RECEIVE_ENABLED() __builtin_expect (quicly_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_RECEIVE(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, receive, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_VERSION_SWITCH ( struct st_quicly_conn_t *conn, int64_t at, uint32_t new_version ) */
#if defined STAP_SDT_V1
#define QUICLY_VERSION_SWITCH_ENABLED() __builtin_expect (version_switch_semaphore, 0)
#define quicly_version_switch_semaphore version_switch_semaphore
#else
#define QUICLY_VERSION_SWITCH_ENABLED() __builtin_expect (quicly_version_switch_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_version_switch_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_VERSION_SWITCH(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, version_switch, arg1, arg2, arg3)

/* QUICLY_IDLE_TIMEOUT ( struct st_quicly_conn_t *conn, int64_t at ) */
#if defined STAP_SDT_V1
#define QUICLY_IDLE_TIMEOUT_ENABLED() __builtin_expect (idle_timeout_semaphore, 0)
#define quicly_idle_timeout_semaphore idle_timeout_semaphore
#else
#define QUICLY_IDLE_TIMEOUT_ENABLED() __builtin_expect (quicly_idle_timeout_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_idle_timeout_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_IDLE_TIMEOUT(arg1, arg2) \
DTRACE_PROBE2 (quicly, idle_timeout, arg1, arg2)

/* QUICLY_STATELESS_RESET_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at ) */
#if defined STAP_SDT_V1
#define QUICLY_STATELESS_RESET_RECEIVE_ENABLED() __builtin_expect (stateless_reset_receive_semaphore, 0)
#define quicly_stateless_reset_receive_semaphore stateless_reset_receive_semaphore
#else
#define QUICLY_STATELESS_RESET_RECEIVE_ENABLED() __builtin_expect (quicly_stateless_reset_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stateless_reset_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STATELESS_RESET_RECEIVE(arg1, arg2) \
DTRACE_PROBE2 (quicly, stateless_reset_receive, arg1, arg2)

/* QUICLY_CRYPTO_DECRYPT ( struct st_quicly_conn_t *conn, int64_t at, uint64_t pn, const void *decrypted, size_t decrypted_len ) */
#if defined STAP_SDT_V1
#define QUICLY_CRYPTO_DECRYPT_ENABLED() __builtin_expect (crypto_decrypt_semaphore, 0)
#define quicly_crypto_decrypt_semaphore crypto_decrypt_semaphore
#else
#define QUICLY_CRYPTO_DECRYPT_ENABLED() __builtin_expect (quicly_crypto_decrypt_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_crypto_decrypt_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CRYPTO_DECRYPT(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, crypto_decrypt, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_CRYPTO_HANDSHAKE ( struct st_quicly_conn_t *conn, int64_t at, int ret ) */
#if defined STAP_SDT_V1
#define QUICLY_CRYPTO_HANDSHAKE_ENABLED() __builtin_expect (crypto_handshake_semaphore, 0)
#define quicly_crypto_handshake_semaphore crypto_handshake_semaphore
#else
#define QUICLY_CRYPTO_HANDSHAKE_ENABLED() __builtin_expect (quicly_crypto_handshake_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_crypto_handshake_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CRYPTO_HANDSHAKE(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, crypto_handshake, arg1, arg2, arg3)

/* QUICLY_CRYPTO_UPDATE_SECRET ( struct st_quicly_conn_t *conn, int64_t at, int is_enc, uint8_t epoch, const char *label, const char *secret ) */
#if defined STAP_SDT_V1
#define QUICLY_CRYPTO_UPDATE_SECRET_ENABLED() __builtin_expect (crypto_update_secret_semaphore, 0)
#define quicly_crypto_update_secret_semaphore crypto_update_secret_semaphore
#else
#define QUICLY_CRYPTO_UPDATE_SECRET_ENABLED() __builtin_expect (quicly_crypto_update_secret_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_crypto_update_secret_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CRYPTO_UPDATE_SECRET(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, crypto_update_secret, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_CRYPTO_SEND_KEY_UPDATE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t phase, const char *secret ) */
#if defined STAP_SDT_V1
#define QUICLY_CRYPTO_SEND_KEY_UPDATE_ENABLED() __builtin_expect (crypto_send_key_update_semaphore, 0)
#define quicly_crypto_send_key_update_semaphore crypto_send_key_update_semaphore
#else
#define QUICLY_CRYPTO_SEND_KEY_UPDATE_ENABLED() __builtin_expect (quicly_crypto_send_key_update_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_crypto_send_key_update_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CRYPTO_SEND_KEY_UPDATE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, crypto_send_key_update, arg1, arg2, arg3, arg4)

/* QUICLY_CRYPTO_SEND_KEY_UPDATE_CONFIRMED ( struct st_quicly_conn_t *conn, int64_t at, uint64_t next_pn ) */
#if defined STAP_SDT_V1
#define QUICLY_CRYPTO_SEND_KEY_UPDATE_CONFIRMED_ENABLED() __builtin_expect (crypto_send_key_update_confirmed_semaphore, 0)
#define quicly_crypto_send_key_update_confirmed_semaphore crypto_send_key_update_confirmed_semaphore
#else
#define QUICLY_CRYPTO_SEND_KEY_UPDATE_CONFIRMED_ENABLED() __builtin_expect (quicly_crypto_send_key_update_confirmed_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_crypto_send_key_update_confirmed_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CRYPTO_SEND_KEY_UPDATE_CONFIRMED(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, crypto_send_key_update_confirmed, arg1, arg2, arg3)

/* QUICLY_CRYPTO_RECEIVE_KEY_UPDATE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t phase, const char *secret ) */
#if defined STAP_SDT_V1
#define QUICLY_CRYPTO_RECEIVE_KEY_UPDATE_ENABLED() __builtin_expect (crypto_receive_key_update_semaphore, 0)
#define quicly_crypto_receive_key_update_semaphore crypto_receive_key_update_semaphore
#else
#define QUICLY_CRYPTO_RECEIVE_KEY_UPDATE_ENABLED() __builtin_expect (quicly_crypto_receive_key_update_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_crypto_receive_key_update_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CRYPTO_RECEIVE_KEY_UPDATE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, crypto_receive_key_update, arg1, arg2, arg3, arg4)

/* QUICLY_CRYPTO_RECEIVE_KEY_UPDATE_PREPARE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t phase, const char *secret ) */
#if defined STAP_SDT_V1
#define QUICLY_CRYPTO_RECEIVE_KEY_UPDATE_PREPARE_ENABLED() __builtin_expect (crypto_receive_key_update_prepare_semaphore, 0)
#define quicly_crypto_receive_key_update_prepare_semaphore crypto_receive_key_update_prepare_semaphore
#else
#define QUICLY_CRYPTO_RECEIVE_KEY_UPDATE_PREPARE_ENABLED() __builtin_expect (quicly_crypto_receive_key_update_prepare_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_crypto_receive_key_update_prepare_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CRYPTO_RECEIVE_KEY_UPDATE_PREPARE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, crypto_receive_key_update_prepare, arg1, arg2, arg3, arg4)

/* QUICLY_PACKET_PREPARE ( struct st_quicly_conn_t *conn, int64_t at, uint8_t first_octet, const char *dcid ) */
#if defined STAP_SDT_V1
#define QUICLY_PACKET_PREPARE_ENABLED() __builtin_expect (packet_prepare_semaphore, 0)
#define quicly_packet_prepare_semaphore packet_prepare_semaphore
#else
#define QUICLY_PACKET_PREPARE_ENABLED() __builtin_expect (quicly_packet_prepare_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_packet_prepare_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_PACKET_PREPARE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, packet_prepare, arg1, arg2, arg3, arg4)

/* QUICLY_PACKET_COMMIT ( struct st_quicly_conn_t *conn, int64_t at, uint64_t pn, size_t len, int ack_only ) */
#if defined STAP_SDT_V1
#define QUICLY_PACKET_COMMIT_ENABLED() __builtin_expect (packet_commit_semaphore, 0)
#define quicly_packet_commit_semaphore packet_commit_semaphore
#else
#define QUICLY_PACKET_COMMIT_ENABLED() __builtin_expect (quicly_packet_commit_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_packet_commit_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_PACKET_COMMIT(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, packet_commit, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_PACKET_ACKED ( struct st_quicly_conn_t *conn, int64_t at, uint64_t pn, int is_late_ack ) */
#if defined STAP_SDT_V1
#define QUICLY_PACKET_ACKED_ENABLED() __builtin_expect (packet_acked_semaphore, 0)
#define quicly_packet_acked_semaphore packet_acked_semaphore
#else
#define QUICLY_PACKET_ACKED_ENABLED() __builtin_expect (quicly_packet_acked_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_packet_acked_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_PACKET_ACKED(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, packet_acked, arg1, arg2, arg3, arg4)

/* QUICLY_PACKET_LOST ( struct st_quicly_conn_t *conn, int64_t at, uint64_t pn ) */
#if defined STAP_SDT_V1
#define QUICLY_PACKET_LOST_ENABLED() __builtin_expect (packet_lost_semaphore, 0)
#define quicly_packet_lost_semaphore packet_lost_semaphore
#else
#define QUICLY_PACKET_LOST_ENABLED() __builtin_expect (quicly_packet_lost_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_packet_lost_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_PACKET_LOST(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, packet_lost, arg1, arg2, arg3)

/* QUICLY_PTO ( struct st_quicly_conn_t *conn, int64_t at, size_t inflight, uint32_t cwnd, int8_t pto_count ) */
#if defined STAP_SDT_V1
#define QUICLY_PTO_ENABLED() __builtin_expect (pto_semaphore, 0)
#define quicly_pto_semaphore pto_semaphore
#else
#define QUICLY_PTO_ENABLED() __builtin_expect (quicly_pto_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_pto_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_PTO(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, pto, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_CC_ACK_RECEIVED ( struct st_quicly_conn_t *conn, int64_t at, uint64_t largest_acked, size_t bytes_acked, uint32_t cwnd, size_t inflight ) */
#if defined STAP_SDT_V1
#define QUICLY_CC_ACK_RECEIVED_ENABLED() __builtin_expect (cc_ack_received_semaphore, 0)
#define quicly_cc_ack_received_semaphore cc_ack_received_semaphore
#else
#define QUICLY_CC_ACK_RECEIVED_ENABLED() __builtin_expect (quicly_cc_ack_received_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_cc_ack_received_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CC_ACK_RECEIVED(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, cc_ack_received, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_CC_CONGESTION ( struct st_quicly_conn_t *conn, int64_t at, uint64_t max_lost_pn, size_t inflight, uint32_t cwnd ) */
#if defined STAP_SDT_V1
#define QUICLY_CC_CONGESTION_ENABLED() __builtin_expect (cc_congestion_semaphore, 0)
#define quicly_cc_congestion_semaphore cc_congestion_semaphore
#else
#define QUICLY_CC_CONGESTION_ENABLED() __builtin_expect (quicly_cc_congestion_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_cc_congestion_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CC_CONGESTION(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, cc_congestion, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_ACK_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t largest_acked, uint64_t ack_delay ) */
#if defined STAP_SDT_V1
#define QUICLY_ACK_SEND_ENABLED() __builtin_expect (ack_send_semaphore, 0)
#define quicly_ack_send_semaphore ack_send_semaphore
#else
#define QUICLY_ACK_SEND_ENABLED() __builtin_expect (quicly_ack_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_ack_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_ACK_SEND(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, ack_send, arg1, arg2, arg3, arg4)

/* QUICLY_PING_SEND ( struct st_quicly_conn_t *conn, int64_t at ) */
#if defined STAP_SDT_V1
#define QUICLY_PING_SEND_ENABLED() __builtin_expect (ping_send_semaphore, 0)
#define quicly_ping_send_semaphore ping_send_semaphore
#else
#define QUICLY_PING_SEND_ENABLED() __builtin_expect (quicly_ping_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_ping_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_PING_SEND(arg1, arg2) \
DTRACE_PROBE2 (quicly, ping_send, arg1, arg2)

/* QUICLY_PING_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at ) */
#if defined STAP_SDT_V1
#define QUICLY_PING_RECEIVE_ENABLED() __builtin_expect (ping_receive_semaphore, 0)
#define quicly_ping_receive_semaphore ping_receive_semaphore
#else
#define QUICLY_PING_RECEIVE_ENABLED() __builtin_expect (quicly_ping_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_ping_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_PING_RECEIVE(arg1, arg2) \
DTRACE_PROBE2 (quicly, ping_receive, arg1, arg2)

/* QUICLY_TRANSPORT_CLOSE_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t error_code, uint64_t frame_type, const char *reason_phrase ) */
#if defined STAP_SDT_V1
#define QUICLY_TRANSPORT_CLOSE_SEND_ENABLED() __builtin_expect (transport_close_send_semaphore, 0)
#define quicly_transport_close_send_semaphore transport_close_send_semaphore
#else
#define QUICLY_TRANSPORT_CLOSE_SEND_ENABLED() __builtin_expect (quicly_transport_close_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_transport_close_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_TRANSPORT_CLOSE_SEND(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, transport_close_send, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_TRANSPORT_CLOSE_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t error_code, uint64_t frame_type, const char *reason_phrase ) */
#if defined STAP_SDT_V1
#define QUICLY_TRANSPORT_CLOSE_RECEIVE_ENABLED() __builtin_expect (transport_close_receive_semaphore, 0)
#define quicly_transport_close_receive_semaphore transport_close_receive_semaphore
#else
#define QUICLY_TRANSPORT_CLOSE_RECEIVE_ENABLED() __builtin_expect (quicly_transport_close_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_transport_close_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_TRANSPORT_CLOSE_RECEIVE(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, transport_close_receive, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_APPLICATION_CLOSE_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t error_code, const char *reason_phrase ) */
#if defined STAP_SDT_V1
#define QUICLY_APPLICATION_CLOSE_SEND_ENABLED() __builtin_expect (application_close_send_semaphore, 0)
#define quicly_application_close_send_semaphore application_close_send_semaphore
#else
#define QUICLY_APPLICATION_CLOSE_SEND_ENABLED() __builtin_expect (quicly_application_close_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_application_close_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_APPLICATION_CLOSE_SEND(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, application_close_send, arg1, arg2, arg3, arg4)

/* QUICLY_APPLICATION_CLOSE_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t error_code, const char *reason_phrase ) */
#if defined STAP_SDT_V1
#define QUICLY_APPLICATION_CLOSE_RECEIVE_ENABLED() __builtin_expect (application_close_receive_semaphore, 0)
#define quicly_application_close_receive_semaphore application_close_receive_semaphore
#else
#define QUICLY_APPLICATION_CLOSE_RECEIVE_ENABLED() __builtin_expect (quicly_application_close_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_application_close_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_APPLICATION_CLOSE_RECEIVE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, application_close_receive, arg1, arg2, arg3, arg4)

/* QUICLY_STREAM_SEND ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, uint64_t off, size_t len, int is_fin ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_SEND_ENABLED() __builtin_expect (stream_send_semaphore, 0)
#define quicly_stream_send_semaphore stream_send_semaphore
#else
#define QUICLY_STREAM_SEND_ENABLED() __builtin_expect (quicly_stream_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_SEND(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, stream_send, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_STREAM_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, uint64_t off, size_t len ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_RECEIVE_ENABLED() __builtin_expect (stream_receive_semaphore, 0)
#define quicly_stream_receive_semaphore stream_receive_semaphore
#else
#define QUICLY_STREAM_RECEIVE_ENABLED() __builtin_expect (quicly_stream_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_RECEIVE(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, stream_receive, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_STREAM_ACKED ( struct st_quicly_conn_t *conn, int64_t at, int64_t stream_id, uint64_t off, size_t len ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ACKED_ENABLED() __builtin_expect (stream_acked_semaphore, 0)
#define quicly_stream_acked_semaphore stream_acked_semaphore
#else
#define QUICLY_STREAM_ACKED_ENABLED() __builtin_expect (quicly_stream_acked_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_acked_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ACKED(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, stream_acked, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_STREAM_LOST ( struct st_quicly_conn_t *conn, int64_t at, int64_t stream_id, uint64_t off, size_t len ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_LOST_ENABLED() __builtin_expect (stream_lost_semaphore, 0)
#define quicly_stream_lost_semaphore stream_lost_semaphore
#else
#define QUICLY_STREAM_LOST_ENABLED() __builtin_expect (quicly_stream_lost_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_lost_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_LOST(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, stream_lost, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_MAX_DATA_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t limit ) */
#if defined STAP_SDT_V1
#define QUICLY_MAX_DATA_SEND_ENABLED() __builtin_expect (max_data_send_semaphore, 0)
#define quicly_max_data_send_semaphore max_data_send_semaphore
#else
#define QUICLY_MAX_DATA_SEND_ENABLED() __builtin_expect (quicly_max_data_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_max_data_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_MAX_DATA_SEND(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, max_data_send, arg1, arg2, arg3)

/* QUICLY_MAX_DATA_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t limit ) */
#if defined STAP_SDT_V1
#define QUICLY_MAX_DATA_RECEIVE_ENABLED() __builtin_expect (max_data_receive_semaphore, 0)
#define quicly_max_data_receive_semaphore max_data_receive_semaphore
#else
#define QUICLY_MAX_DATA_RECEIVE_ENABLED() __builtin_expect (quicly_max_data_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_max_data_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_MAX_DATA_RECEIVE(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, max_data_receive, arg1, arg2, arg3)

/* QUICLY_MAX_STREAMS_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t limit, int is_unidirectional ) */
#if defined STAP_SDT_V1
#define QUICLY_MAX_STREAMS_SEND_ENABLED() __builtin_expect (max_streams_send_semaphore, 0)
#define quicly_max_streams_send_semaphore max_streams_send_semaphore
#else
#define QUICLY_MAX_STREAMS_SEND_ENABLED() __builtin_expect (quicly_max_streams_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_max_streams_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_MAX_STREAMS_SEND(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, max_streams_send, arg1, arg2, arg3, arg4)

/* QUICLY_MAX_STREAMS_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t limit, int is_unidirectional ) */
#if defined STAP_SDT_V1
#define QUICLY_MAX_STREAMS_RECEIVE_ENABLED() __builtin_expect (max_streams_receive_semaphore, 0)
#define quicly_max_streams_receive_semaphore max_streams_receive_semaphore
#else
#define QUICLY_MAX_STREAMS_RECEIVE_ENABLED() __builtin_expect (quicly_max_streams_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_max_streams_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_MAX_STREAMS_RECEIVE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, max_streams_receive, arg1, arg2, arg3, arg4)

/* QUICLY_MAX_STREAM_DATA_SEND ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, uint64_t limit ) */
#if defined STAP_SDT_V1
#define QUICLY_MAX_STREAM_DATA_SEND_ENABLED() __builtin_expect (max_stream_data_send_semaphore, 0)
#define quicly_max_stream_data_send_semaphore max_stream_data_send_semaphore
#else
#define QUICLY_MAX_STREAM_DATA_SEND_ENABLED() __builtin_expect (quicly_max_stream_data_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_max_stream_data_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_MAX_STREAM_DATA_SEND(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, max_stream_data_send, arg1, arg2, arg3, arg4)

/* QUICLY_MAX_STREAM_DATA_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, int64_t stream_id, uint64_t limit ) */
#if defined STAP_SDT_V1
#define QUICLY_MAX_STREAM_DATA_RECEIVE_ENABLED() __builtin_expect (max_stream_data_receive_semaphore, 0)
#define quicly_max_stream_data_receive_semaphore max_stream_data_receive_semaphore
#else
#define QUICLY_MAX_STREAM_DATA_RECEIVE_ENABLED() __builtin_expect (quicly_max_stream_data_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_max_stream_data_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_MAX_STREAM_DATA_RECEIVE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, max_stream_data_receive, arg1, arg2, arg3, arg4)

/* QUICLY_NEW_TOKEN_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint8_t *token, size_t token_len, uint64_t generation ) */
#if defined STAP_SDT_V1
#define QUICLY_NEW_TOKEN_SEND_ENABLED() __builtin_expect (new_token_send_semaphore, 0)
#define quicly_new_token_send_semaphore new_token_send_semaphore
#else
#define QUICLY_NEW_TOKEN_SEND_ENABLED() __builtin_expect (quicly_new_token_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_new_token_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_NEW_TOKEN_SEND(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, new_token_send, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_NEW_TOKEN_ACKED ( struct st_quicly_conn_t *conn, int64_t at, uint64_t generation ) */
#if defined STAP_SDT_V1
#define QUICLY_NEW_TOKEN_ACKED_ENABLED() __builtin_expect (new_token_acked_semaphore, 0)
#define quicly_new_token_acked_semaphore new_token_acked_semaphore
#else
#define QUICLY_NEW_TOKEN_ACKED_ENABLED() __builtin_expect (quicly_new_token_acked_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_new_token_acked_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_NEW_TOKEN_ACKED(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, new_token_acked, arg1, arg2, arg3)

/* QUICLY_NEW_TOKEN_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint8_t *token, size_t token_len ) */
#if defined STAP_SDT_V1
#define QUICLY_NEW_TOKEN_RECEIVE_ENABLED() __builtin_expect (new_token_receive_semaphore, 0)
#define quicly_new_token_receive_semaphore new_token_receive_semaphore
#else
#define QUICLY_NEW_TOKEN_RECEIVE_ENABLED() __builtin_expect (quicly_new_token_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_new_token_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_NEW_TOKEN_RECEIVE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, new_token_receive, arg1, arg2, arg3, arg4)

/* QUICLY_HANDSHAKE_DONE_SEND ( struct st_quicly_conn_t *conn, int64_t at ) */
#if defined STAP_SDT_V1
#define QUICLY_HANDSHAKE_DONE_SEND_ENABLED() __builtin_expect (handshake_done_send_semaphore, 0)
#define quicly_handshake_done_send_semaphore handshake_done_send_semaphore
#else
#define QUICLY_HANDSHAKE_DONE_SEND_ENABLED() __builtin_expect (quicly_handshake_done_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_handshake_done_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_HANDSHAKE_DONE_SEND(arg1, arg2) \
DTRACE_PROBE2 (quicly, handshake_done_send, arg1, arg2)

/* QUICLY_HANDSHAKE_DONE_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at ) */
#if defined STAP_SDT_V1
#define QUICLY_HANDSHAKE_DONE_RECEIVE_ENABLED() __builtin_expect (handshake_done_receive_semaphore, 0)
#define quicly_handshake_done_receive_semaphore handshake_done_receive_semaphore
#else
#define QUICLY_HANDSHAKE_DONE_RECEIVE_ENABLED() __builtin_expect (quicly_handshake_done_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_handshake_done_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_HANDSHAKE_DONE_RECEIVE(arg1, arg2) \
DTRACE_PROBE2 (quicly, handshake_done_receive, arg1, arg2)

/* QUICLY_STREAMS_BLOCKED_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t limit, int is_unidirectional ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAMS_BLOCKED_SEND_ENABLED() __builtin_expect (streams_blocked_send_semaphore, 0)
#define quicly_streams_blocked_send_semaphore streams_blocked_send_semaphore
#else
#define QUICLY_STREAMS_BLOCKED_SEND_ENABLED() __builtin_expect (quicly_streams_blocked_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_streams_blocked_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAMS_BLOCKED_SEND(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, streams_blocked_send, arg1, arg2, arg3, arg4)

/* QUICLY_STREAMS_BLOCKED_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t limit, int is_unidirectional ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAMS_BLOCKED_RECEIVE_ENABLED() __builtin_expect (streams_blocked_receive_semaphore, 0)
#define quicly_streams_blocked_receive_semaphore streams_blocked_receive_semaphore
#else
#define QUICLY_STREAMS_BLOCKED_RECEIVE_ENABLED() __builtin_expect (quicly_streams_blocked_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_streams_blocked_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAMS_BLOCKED_RECEIVE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, streams_blocked_receive, arg1, arg2, arg3, arg4)

/* QUICLY_NEW_CONNECTION_ID_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t sequence, uint64_t retire_prior_to, const char *cid, const char *stateless_reset_token ) */
#if defined STAP_SDT_V1
#define QUICLY_NEW_CONNECTION_ID_SEND_ENABLED() __builtin_expect (new_connection_id_send_semaphore, 0)
#define quicly_new_connection_id_send_semaphore new_connection_id_send_semaphore
#else
#define QUICLY_NEW_CONNECTION_ID_SEND_ENABLED() __builtin_expect (quicly_new_connection_id_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_new_connection_id_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_NEW_CONNECTION_ID_SEND(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, new_connection_id_send, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_NEW_CONNECTION_ID_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t sequence, uint64_t retire_prior_to, const char *cid, const char *stateless_reset_token ) */
#if defined STAP_SDT_V1
#define QUICLY_NEW_CONNECTION_ID_RECEIVE_ENABLED() __builtin_expect (new_connection_id_receive_semaphore, 0)
#define quicly_new_connection_id_receive_semaphore new_connection_id_receive_semaphore
#else
#define QUICLY_NEW_CONNECTION_ID_RECEIVE_ENABLED() __builtin_expect (quicly_new_connection_id_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_new_connection_id_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_NEW_CONNECTION_ID_RECEIVE(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, new_connection_id_receive, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_RETIRE_CONNECTION_ID_SEND ( struct st_quicly_conn_t *conn, int64_t at, uint64_t sequence ) */
#if defined STAP_SDT_V1
#define QUICLY_RETIRE_CONNECTION_ID_SEND_ENABLED() __builtin_expect (retire_connection_id_send_semaphore, 0)
#define quicly_retire_connection_id_send_semaphore retire_connection_id_send_semaphore
#else
#define QUICLY_RETIRE_CONNECTION_ID_SEND_ENABLED() __builtin_expect (quicly_retire_connection_id_send_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_retire_connection_id_send_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_RETIRE_CONNECTION_ID_SEND(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, retire_connection_id_send, arg1, arg2, arg3)

/* QUICLY_RETIRE_CONNECTION_ID_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t sequence ) */
#if defined STAP_SDT_V1
#define QUICLY_RETIRE_CONNECTION_ID_RECEIVE_ENABLED() __builtin_expect (retire_connection_id_receive_semaphore, 0)
#define quicly_retire_connection_id_receive_semaphore retire_connection_id_receive_semaphore
#else
#define QUICLY_RETIRE_CONNECTION_ID_RECEIVE_ENABLED() __builtin_expect (quicly_retire_connection_id_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_retire_connection_id_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_RETIRE_CONNECTION_ID_RECEIVE(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, retire_connection_id_receive, arg1, arg2, arg3)

/* QUICLY_DATA_BLOCKED_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t off ) */
#if defined STAP_SDT_V1
#define QUICLY_DATA_BLOCKED_RECEIVE_ENABLED() __builtin_expect (data_blocked_receive_semaphore, 0)
#define quicly_data_blocked_receive_semaphore data_blocked_receive_semaphore
#else
#define QUICLY_DATA_BLOCKED_RECEIVE_ENABLED() __builtin_expect (quicly_data_blocked_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_data_blocked_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_DATA_BLOCKED_RECEIVE(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, data_blocked_receive, arg1, arg2, arg3)

/* QUICLY_STREAM_DATA_BLOCKED_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, int64_t stream_id, uint64_t limit ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_DATA_BLOCKED_RECEIVE_ENABLED() __builtin_expect (stream_data_blocked_receive_semaphore, 0)
#define quicly_stream_data_blocked_receive_semaphore stream_data_blocked_receive_semaphore
#else
#define QUICLY_STREAM_DATA_BLOCKED_RECEIVE_ENABLED() __builtin_expect (quicly_stream_data_blocked_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_data_blocked_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_DATA_BLOCKED_RECEIVE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, stream_data_blocked_receive, arg1, arg2, arg3, arg4)

/* QUICLY_ACK_FREQUENCY_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, uint64_t sequence, uint64_t packet_tolerance, uint64_t max_ack_delay, int ignore_order ) */
#if defined STAP_SDT_V1
#define QUICLY_ACK_FREQUENCY_RECEIVE_ENABLED() __builtin_expect (ack_frequency_receive_semaphore, 0)
#define quicly_ack_frequency_receive_semaphore ack_frequency_receive_semaphore
#else
#define QUICLY_ACK_FREQUENCY_RECEIVE_ENABLED() __builtin_expect (quicly_ack_frequency_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_ack_frequency_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_ACK_FREQUENCY_RECEIVE(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, ack_frequency_receive, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_QUICTRACE_SENT ( struct st_quicly_conn_t *conn, int64_t at, uint64_t pn, size_t len, uint8_t packet_type ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_SENT_ENABLED() __builtin_expect (quictrace_sent_semaphore, 0)
#define quicly_quictrace_sent_semaphore quictrace_sent_semaphore
#else
#define QUICLY_QUICTRACE_SENT_ENABLED() __builtin_expect (quicly_quictrace_sent_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_sent_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_SENT(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, quictrace_sent, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_QUICTRACE_RECV ( struct st_quicly_conn_t *conn, int64_t at, uint64_t pn ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_RECV_ENABLED() __builtin_expect (quictrace_recv_semaphore, 0)
#define quicly_quictrace_recv_semaphore quictrace_recv_semaphore
#else
#define QUICLY_QUICTRACE_RECV_ENABLED() __builtin_expect (quicly_quictrace_recv_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_recv_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_RECV(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, quictrace_recv, arg1, arg2, arg3)

/* QUICLY_QUICTRACE_SEND_STREAM ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, uint64_t off, size_t len, int fin ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_SEND_STREAM_ENABLED() __builtin_expect (quictrace_send_stream_semaphore, 0)
#define quicly_quictrace_send_stream_semaphore quictrace_send_stream_semaphore
#else
#define QUICLY_QUICTRACE_SEND_STREAM_ENABLED() __builtin_expect (quicly_quictrace_send_stream_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_send_stream_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_SEND_STREAM(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, quictrace_send_stream, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_QUICTRACE_RECV_STREAM ( struct st_quicly_conn_t *conn, int64_t at, int64_t stream_id, uint64_t off, size_t len, int fin ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_RECV_STREAM_ENABLED() __builtin_expect (quictrace_recv_stream_semaphore, 0)
#define quicly_quictrace_recv_stream_semaphore quictrace_recv_stream_semaphore
#else
#define QUICLY_QUICTRACE_RECV_STREAM_ENABLED() __builtin_expect (quicly_quictrace_recv_stream_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_recv_stream_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_RECV_STREAM(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, quictrace_recv_stream, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_QUICTRACE_RECV_ACK ( struct st_quicly_conn_t *conn, int64_t at, uint64_t ack_block_begin, uint64_t ack_block_end ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_RECV_ACK_ENABLED() __builtin_expect (quictrace_recv_ack_semaphore, 0)
#define quicly_quictrace_recv_ack_semaphore quictrace_recv_ack_semaphore
#else
#define QUICLY_QUICTRACE_RECV_ACK_ENABLED() __builtin_expect (quicly_quictrace_recv_ack_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_recv_ack_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_RECV_ACK(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, quictrace_recv_ack, arg1, arg2, arg3, arg4)

/* QUICLY_QUICTRACE_RECV_ACK_DELAY ( struct st_quicly_conn_t *conn, int64_t at, int64_t ack_delay ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_RECV_ACK_DELAY_ENABLED() __builtin_expect (quictrace_recv_ack_delay_semaphore, 0)
#define quicly_quictrace_recv_ack_delay_semaphore quictrace_recv_ack_delay_semaphore
#else
#define QUICLY_QUICTRACE_RECV_ACK_DELAY_ENABLED() __builtin_expect (quicly_quictrace_recv_ack_delay_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_recv_ack_delay_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_RECV_ACK_DELAY(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, quictrace_recv_ack_delay, arg1, arg2, arg3)

/* QUICLY_QUICTRACE_LOST ( struct st_quicly_conn_t *conn, int64_t at, uint64_t pn ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_LOST_ENABLED() __builtin_expect (quictrace_lost_semaphore, 0)
#define quicly_quictrace_lost_semaphore quictrace_lost_semaphore
#else
#define QUICLY_QUICTRACE_LOST_ENABLED() __builtin_expect (quicly_quictrace_lost_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_lost_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_LOST(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, quictrace_lost, arg1, arg2, arg3)

/* QUICLY_QUICTRACE_CC_ACK ( struct st_quicly_conn_t *conn, int64_t at, struct quicly_rtt_t *rtt, uint32_t cwnd, size_t inflight ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_CC_ACK_ENABLED() __builtin_expect (quictrace_cc_ack_semaphore, 0)
#define quicly_quictrace_cc_ack_semaphore quictrace_cc_ack_semaphore
#else
#define QUICLY_QUICTRACE_CC_ACK_ENABLED() __builtin_expect (quicly_quictrace_cc_ack_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_cc_ack_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_CC_ACK(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, quictrace_cc_ack, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_QUICTRACE_CC_LOST ( struct st_quicly_conn_t *conn, int64_t at, struct quicly_rtt_t *rtt, uint32_t cwnd, size_t inflight ) */
#if defined STAP_SDT_V1
#define QUICLY_QUICTRACE_CC_LOST_ENABLED() __builtin_expect (quictrace_cc_lost_semaphore, 0)
#define quicly_quictrace_cc_lost_semaphore quictrace_cc_lost_semaphore
#else
#define QUICLY_QUICTRACE_CC_LOST_ENABLED() __builtin_expect (quicly_quictrace_cc_lost_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_quictrace_cc_lost_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_QUICTRACE_CC_LOST(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, quictrace_cc_lost, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_STREAM_ON_OPEN ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ON_OPEN_ENABLED() __builtin_expect (stream_on_open_semaphore, 0)
#define quicly_stream_on_open_semaphore stream_on_open_semaphore
#else
#define QUICLY_STREAM_ON_OPEN_ENABLED() __builtin_expect (quicly_stream_on_open_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_on_open_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ON_OPEN(arg1, arg2, arg3) \
DTRACE_PROBE3 (quicly, stream_on_open, arg1, arg2, arg3)

/* QUICLY_STREAM_ON_DESTROY ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, int err ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ON_DESTROY_ENABLED() __builtin_expect (stream_on_destroy_semaphore, 0)
#define quicly_stream_on_destroy_semaphore stream_on_destroy_semaphore
#else
#define QUICLY_STREAM_ON_DESTROY_ENABLED() __builtin_expect (quicly_stream_on_destroy_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_on_destroy_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ON_DESTROY(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, stream_on_destroy, arg1, arg2, arg3, arg4)

/* QUICLY_STREAM_ON_SEND_SHIFT ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, size_t delta ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ON_SEND_SHIFT_ENABLED() __builtin_expect (stream_on_send_shift_semaphore, 0)
#define quicly_stream_on_send_shift_semaphore stream_on_send_shift_semaphore
#else
#define QUICLY_STREAM_ON_SEND_SHIFT_ENABLED() __builtin_expect (quicly_stream_on_send_shift_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_on_send_shift_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ON_SEND_SHIFT(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, stream_on_send_shift, arg1, arg2, arg3, arg4)

/* QUICLY_STREAM_ON_SEND_EMIT ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, size_t off, size_t capacity ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ON_SEND_EMIT_ENABLED() __builtin_expect (stream_on_send_emit_semaphore, 0)
#define quicly_stream_on_send_emit_semaphore stream_on_send_emit_semaphore
#else
#define QUICLY_STREAM_ON_SEND_EMIT_ENABLED() __builtin_expect (quicly_stream_on_send_emit_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_on_send_emit_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ON_SEND_EMIT(arg1, arg2, arg3, arg4, arg5) \
DTRACE_PROBE5 (quicly, stream_on_send_emit, arg1, arg2, arg3, arg4, arg5)

/* QUICLY_STREAM_ON_SEND_STOP ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, int err ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ON_SEND_STOP_ENABLED() __builtin_expect (stream_on_send_stop_semaphore, 0)
#define quicly_stream_on_send_stop_semaphore stream_on_send_stop_semaphore
#else
#define QUICLY_STREAM_ON_SEND_STOP_ENABLED() __builtin_expect (quicly_stream_on_send_stop_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_on_send_stop_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ON_SEND_STOP(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, stream_on_send_stop, arg1, arg2, arg3, arg4)

/* QUICLY_STREAM_ON_RECEIVE ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, size_t off, const void *src, size_t src_len ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ON_RECEIVE_ENABLED() __builtin_expect (stream_on_receive_semaphore, 0)
#define quicly_stream_on_receive_semaphore stream_on_receive_semaphore
#else
#define QUICLY_STREAM_ON_RECEIVE_ENABLED() __builtin_expect (quicly_stream_on_receive_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_on_receive_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ON_RECEIVE(arg1, arg2, arg3, arg4, arg5, arg6) \
DTRACE_PROBE6 (quicly, stream_on_receive, arg1, arg2, arg3, arg4, arg5, arg6)

/* QUICLY_STREAM_ON_RECEIVE_RESET ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stream_t *stream, int err ) */
#if defined STAP_SDT_V1
#define QUICLY_STREAM_ON_RECEIVE_RESET_ENABLED() __builtin_expect (stream_on_receive_reset_semaphore, 0)
#define quicly_stream_on_receive_reset_semaphore stream_on_receive_reset_semaphore
#else
#define QUICLY_STREAM_ON_RECEIVE_RESET_ENABLED() __builtin_expect (quicly_stream_on_receive_reset_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_stream_on_receive_reset_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_STREAM_ON_RECEIVE_RESET(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, stream_on_receive_reset, arg1, arg2, arg3, arg4)

/* QUICLY_DEBUG_MESSAGE ( struct st_quicly_conn_t *conn, const char *function, int line, const char *message ) */
#if defined STAP_SDT_V1
#define QUICLY_DEBUG_MESSAGE_ENABLED() __builtin_expect (debug_message_semaphore, 0)
#define quicly_debug_message_semaphore debug_message_semaphore
#else
#define QUICLY_DEBUG_MESSAGE_ENABLED() __builtin_expect (quicly_debug_message_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_debug_message_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_DEBUG_MESSAGE(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, debug_message, arg1, arg2, arg3, arg4)

/* QUICLY_CONN_STATS ( struct st_quicly_conn_t *conn, int64_t at, struct st_quicly_stats_t *stats, size_t size ) */
#if defined STAP_SDT_V1
#define QUICLY_CONN_STATS_ENABLED() __builtin_expect (conn_stats_semaphore, 0)
#define quicly_conn_stats_semaphore conn_stats_semaphore
#else
#define QUICLY_CONN_STATS_ENABLED() __builtin_expect (quicly_conn_stats_semaphore, 0)
#endif
__extension__ extern unsigned short quicly_conn_stats_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));
#define QUICLY_CONN_STATS(arg1, arg2, arg3, arg4) \
DTRACE_PROBE4 (quicly, conn_stats, arg1, arg2, arg3, arg4)

